// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace PasswordManagerTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// OpenApplication
        /// </summary>
        public void OpenApplication()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIM120ProjektexeListItem.UINameEdit;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(60, 7));
        }
        
        /// <summary>
        /// CreateTestCategory - Use 'CreateTestCategoryParams' to pass parameters into this method.
        /// </summary>
        public void CreateTestCategory()
        {
            #region Variable Declarations
            WpfButton uIBTNAddButton = this.UIPasswordmanagerWindow.UIItemCustom.UIItemToolBar.UIBTNAddButton;
            WpfEdit uITXTNameEdit = this.UIPasswordmanagerWindow.UIItemCustom1.UITXTNameEdit;
            WpfButton uIBTNSaveButton = this.UIPasswordmanagerWindow.UIItemCustom1.UIItemToolBar.UIBTNSaveButton;
            WinButton uIOKButton = this.UICreatedWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'BTNAdd' button
            Mouse.Click(uIBTNAddButton, new Point(15, 14));

            // Type 'TestCategory' in 'TXTName' text box
            uITXTNameEdit.Text = this.CreateTestCategoryParams.UITXTNameEditText;

            // Click 'BTNSave' button
            Mouse.Click(uIBTNSaveButton, new Point(15, 18));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(18, 9));
        }
        
        /// <summary>
        /// CreatePassword - Use 'CreatePasswordParams' to pass parameters into this method.
        /// </summary>
        public void CreatePassword()
        {
            #region Variable Declarations
            WpfButton uIBTNAddButton = this.UIPasswordmanagerWindow.UIItemCustom2.UIItemToolBar.UIBTNAddButton;
            WpfEdit uITXTNameEdit = this.UIPasswordmanagerWindow.UIItemCustom11.UITXTNameEdit;
            WpfEdit uITXTUsernameEdit = this.UIPasswordmanagerWindow.UIItemCustom12.UITXTUsernameEdit;
            WpfEdit uITXTNameEdit1 = this.UIPasswordmanagerWindow.UIItemCustom13.UITXTNameEdit;
            WpfButton uIBTNChangePasswordModButton = this.UIPasswordmanagerWindow.UIItemCustom14.UIBTNChangePasswordModButton;
            WpfEdit uITXTPasswordClearEdit = this.UIPasswordmanagerWindow.UIItemCustom15.UITXTPasswordClearEdit;
            WpfButton uIBTNSaveButton = this.UIPasswordmanagerWindow.UIItemCustom16.UIItemToolBar.UIBTNSaveButton;
            #endregion

            // Click 'BTNAdd' button
            Mouse.Click(uIBTNAddButton, new Point(15, 15));

            // Type 'identifier' in 'TXTName' text box
            uITXTNameEdit.Text = this.CreatePasswordParams.UITXTNameEditText;

            // Type 'user' in 'TXTUsername' text box
            uITXTUsernameEdit.Text = this.CreatePasswordParams.UITXTUsernameEditText;

            // Type 'identy' in 'TXTName' text box
            uITXTNameEdit1.Text = this.CreatePasswordParams.UITXTNameEditText1;

            // Click 'BTNChangePasswordMode' button
            Mouse.Click(uIBTNChangePasswordModButton, new Point(13, 6));

            // Type 'gibbiX12345$' in 'TXTPasswordClear' text box
            uITXTPasswordClearEdit.Text = this.CreatePasswordParams.UITXTPasswordClearEditText;

            // Click 'BTNSave' button
            Mouse.Click(uIBTNSaveButton, new Point(14, 10));
        }
        
        /// <summary>
        /// AssertPasswordCreated - Use 'AssertPasswordCreatedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertPasswordCreated()
        {
            #region Variable Declarations
            WinText uIThepasswordhasbeencrText = this.UICreatedWindow.UIThepasswordhasbeencrWindow.UIThepasswordhasbeencrText;
            #endregion

            // Verify that the 'DisplayText' property of 'The password has been created' label equals 'The password has been created'
            Assert.AreEqual(this.AssertPasswordCreatedExpectedValues.UIThepasswordhasbeencrTextDisplayText, uIThepasswordhasbeencrText.DisplayText);
        }
        
        /// <summary>
        /// GoBackToList
        /// </summary>
        public void GoBackToList()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UICreatedWindow.UIOKWindow.UIOKButton;
            WpfButton uIBTNBackButton = this.UIPasswordmanagerWindow.UIItemCustom11.UIItemToolBar.UIBTNBackButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(41, 10));

            // Click 'BTNBack' button
            Mouse.Click(uIBTNBackButton, new Point(17, 10));
        }
        
        /// <summary>
        /// AssertRowCount - Use 'AssertRowCountExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertRowCount()
        {
            #region Variable Declarations
            WpfTable uIListPasswordsTable = this.UIPasswordmanagerWindow.UIItemCustom2.UIListPasswordsTable;
            #endregion

            // Verify that the 'RowCount' property of 'ListPasswords' table equals '1'
            Assert.AreEqual(this.AssertRowCountExpectedValues.UIListPasswordsTableRowCount, uIListPasswordsTable.RowCount);
        }
        
        /// <summary>
        /// AssertCreatedPasswordIdentifier - Use 'AssertCreatedPasswordIdentifierExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCreatedPasswordIdentifier()
        {
            #region Variable Declarations
            WpfText uIIdentyText = this.UIPasswordmanagerWindow.UIItemCustom2.UIListPasswordsTable.UIItem10026Row.UIIdentyCell.UIIdentyText;
            WpfCell uIIdentyCell = this.UIPasswordmanagerWindow.UIItemCustom2.UIListPasswordsTable.UIItem10026Row.UIIdentyCell;
            #endregion

            //// Verify that the 'DisplayText' property of 'identy' label equals 'identy'
            //Assert.AreEqual(this.AssertCreatedPasswordIdentifierExpectedValues.UIIdentyTextDisplayText, uIIdentyText.DisplayText);

            //// Verify that the 'FriendlyName' property of 'identy' cell equals 'identy'
            //Assert.AreEqual(this.AssertCreatedPasswordIdentifierExpectedValues.UIIdentyCellFriendlyName, uIIdentyCell.FriendlyName);
            var cell = new WpfCell(this.UIPasswordmanagerWindow.UIItemCustom2.UIListPasswordsTable);
            cell.SearchProperties.Add(WpfCell.PropertyNames.RowIndex, (0).ToString());
            cell.SearchProperties.Add(WpfCell.PropertyNames.ColumnIndex, (0).ToString());
            Assert.AreEqual(cell.Value, "identy");
        }
        
        /// <summary>
        /// DeleteCategory
        /// </summary>
        public void DeleteCategory()
        {
            #region Variable Declarations
            WpfText uICategoryText = this.UIPasswordmanagerWindow.UIItemCustom.UIListKategorieTable.UIPART_ColumnHeadersPrHeader.UICategoryColumnHeader.UICategoryText;
            WpfText uITestCategoryText = this.UIPasswordmanagerWindow.UIItemCustom.UIListKategorieTable.UIItem20016Row.UITestCategoryCell.UITestCategoryText;
            WpfButton uIBTNDeleteButton = this.UIPasswordmanagerWindow.UIItemCustom.UIItemToolBar.UIBTNDeleteButton;
            WinButton uIJAButton = this.UIDeleteWindow.UIJAWindow.UIJAButton;
            WinButton uIOKButton = this.UIDeletedWindow.UIOKWindow.UIOKButton;
            #endregion


            var cell = new WpfCell(this.UIPasswordmanagerWindow.UIItemCustom.UIListKategorieTable);
            cell.SearchProperties.Add(WpfCell.PropertyNames.RowIndex, (0).ToString());
            cell.SearchProperties.Add(WpfCell.PropertyNames.ColumnIndex, (0).ToString());
            Mouse.Click(cell);
            //// Click 'Category' label
            //Mouse.Click(uICategoryText, new Point(39, 13));

            //// Click 'TestCategory' label
            //Mouse.Click(uITestCategoryText, new Point(34, 3));

            // Click 'BTNDelete' button
            Mouse.Click(uIBTNDeleteButton, new Point(7, 6));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(53, 2));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(58, 13));

           
        }
        
        /// <summary>
        /// CloseApplication
        /// </summary>
        public void CloseApplication()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UIPasswordmanagerWindow1.UISchließenButton;
            WinButton uIJAButton = this.UIClosingWindow.UIJAWindow.UIJAButton;
            #endregion

            // Click 'Schließen' button
            Mouse.Click(uISchließenButton, new Point(7, 22));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(67, 0));
        }
        
        /// <summary>
        /// SearchAfterIdentifier - Use 'SearchAfterIdentifierParams' to pass parameters into this method.
        /// </summary>
        public void SearchAfterIdentifier()
        {
            #region Variable Declarations
            WpfEdit uITXTSearchTermEdit = this.UIPasswordmanagerWindow.UIItemCustom2.UIItemToolBar.UITXTSearchTermEdit;
            WpfComboBox uICMBSeachCategoryComboBox = this.UIPasswordmanagerWindow.UIItemCustom2.UIItemToolBar.UICMBSeachCategoryComboBox;
            WpfEdit uITXTSearchTermEdit1 = this.UIPasswordmanagerWindow.UIItemCustom2.UIItemToolBar.UITXTSearchTermEdit1;
            #endregion

            // Click 'TXTSearchTerm' text box
            Mouse.Click(uITXTSearchTermEdit, new Point(35, 14));

            // Select 'Identifier' in 'CMBSeachCategory' combo box
            uICMBSeachCategoryComboBox.SelectedItem = this.SearchAfterIdentifierParams.UICMBSeachCategoryComboBoxSelectedItem;

            // Type 'identy' in 'TXTSearchTerm' text box
            uITXTSearchTermEdit1.Text = this.SearchAfterIdentifierParams.UITXTSearchTermEdit1Text;
        }
        
        /// <summary>
        /// UpdatePassword - Use 'UpdatePasswordParams' to pass parameters into this method.
        /// </summary>
        public void UpdatePassword()
        {
            #region Variable Declarations
            WpfButton uIBTNChangePasswordModButton = this.UIPasswordmanagerWindow.UIItemCustom11.UIBTNChangePasswordModButton;
            WpfEdit uITXTPasswordClearEdit = this.UIPasswordmanagerWindow.UIItemCustom11.UITXTPasswordClearEdit;
            WpfButton uIBTNSaveButton = this.UIPasswordmanagerWindow.UIItemCustom11.UIItemToolBar.UIBTNSaveButton;
            WinButton uIOKButton = this.UIUpdatedWindow.UIOKWindow.UIOKButton;
            WpfButton uIBTNBackButton = this.UIPasswordmanagerWindow.UIItemCustom11.UIItemToolBar.UIBTNBackButton;
            #endregion

            //// Click 'BTNChangePasswordMode' button
            //Mouse.Click(uIBTNChangePasswordModButton, new Point(14, 9));

            // Type 'testX12345$' in 'TXTPasswordClear' text box
            uITXTPasswordClearEdit.Text = this.UpdatePasswordParams.UITXTPasswordClearEditText;

            // Click 'BTNSave' button
            Mouse.Click(uIBTNSaveButton, new Point(17, 17));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(50, 10));

            // Click 'BTNBack' button
            Mouse.Click(uIBTNBackButton, new Point(15, 11));
        }
        
        /// <summary>
        /// MakePasswordVisible
        /// </summary>
        public void MakePasswordVisible()
        {
            #region Variable Declarations
            WpfButton uIBTNChangePasswordModButton = this.UIPasswordmanagerWindow.UIItemCustom11.UIBTNChangePasswordModButton;
            #endregion

            // Click 'BTNChangePasswordMode' button
            Mouse.Click(uIBTNChangePasswordModButton, new Point(8, 12));
        }
        
        /// <summary>
        /// AssertPasswordChanged - Use 'AssertPasswordChangedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertPasswordChanged()
        {
            #region Variable Declarations
            WpfEdit uITXTPasswordClearEdit = this.UIPasswordmanagerWindow.UIItemCustom11.UITXTPasswordClearEdit;
            #endregion

            // Verify that the 'Text' property of 'TXTPasswordClear' text box equals 'testX12345$'
            Assert.AreEqual(this.AssertPasswordChangedExpectedValues.UITXTPasswordClearEditText, uITXTPasswordClearEdit.Text);
        }
        
        #region Properties
        public virtual CreateTestCategoryParams CreateTestCategoryParams
        {
            get
            {
                if ((this.mCreateTestCategoryParams == null))
                {
                    this.mCreateTestCategoryParams = new CreateTestCategoryParams();
                }
                return this.mCreateTestCategoryParams;
            }
        }
        
        public virtual CreatePasswordParams CreatePasswordParams
        {
            get
            {
                if ((this.mCreatePasswordParams == null))
                {
                    this.mCreatePasswordParams = new CreatePasswordParams();
                }
                return this.mCreatePasswordParams;
            }
        }
        
        public virtual AssertPasswordCreatedExpectedValues AssertPasswordCreatedExpectedValues
        {
            get
            {
                if ((this.mAssertPasswordCreatedExpectedValues == null))
                {
                    this.mAssertPasswordCreatedExpectedValues = new AssertPasswordCreatedExpectedValues();
                }
                return this.mAssertPasswordCreatedExpectedValues;
            }
        }
        
        public virtual AssertRowCountExpectedValues AssertRowCountExpectedValues
        {
            get
            {
                if ((this.mAssertRowCountExpectedValues == null))
                {
                    this.mAssertRowCountExpectedValues = new AssertRowCountExpectedValues();
                }
                return this.mAssertRowCountExpectedValues;
            }
        }
        
        public virtual AssertCreatedPasswordIdentifierExpectedValues AssertCreatedPasswordIdentifierExpectedValues
        {
            get
            {
                if ((this.mAssertCreatedPasswordIdentifierExpectedValues == null))
                {
                    this.mAssertCreatedPasswordIdentifierExpectedValues = new AssertCreatedPasswordIdentifierExpectedValues();
                }
                return this.mAssertCreatedPasswordIdentifierExpectedValues;
            }
        }
        
        public virtual SearchAfterIdentifierParams SearchAfterIdentifierParams
        {
            get
            {
                if ((this.mSearchAfterIdentifierParams == null))
                {
                    this.mSearchAfterIdentifierParams = new SearchAfterIdentifierParams();
                }
                return this.mSearchAfterIdentifierParams;
            }
        }
        
        public virtual UpdatePasswordParams UpdatePasswordParams
        {
            get
            {
                if ((this.mUpdatePasswordParams == null))
                {
                    this.mUpdatePasswordParams = new UpdatePasswordParams();
                }
                return this.mUpdatePasswordParams;
            }
        }
        
        public virtual AssertPasswordChangedExpectedValues AssertPasswordChangedExpectedValues
        {
            get
            {
                if ((this.mAssertPasswordChangedExpectedValues == null))
                {
                    this.mAssertPasswordChangedExpectedValues = new AssertPasswordChangedExpectedValues();
                }
                return this.mAssertPasswordChangedExpectedValues;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIPasswordmanagerWindow UIPasswordmanagerWindow
        {
            get
            {
                if ((this.mUIPasswordmanagerWindow == null))
                {
                    this.mUIPasswordmanagerWindow = new UIPasswordmanagerWindow();
                }
                return this.mUIPasswordmanagerWindow;
            }
        }
        
        public UICreatedWindow UICreatedWindow
        {
            get
            {
                if ((this.mUICreatedWindow == null))
                {
                    this.mUICreatedWindow = new UICreatedWindow();
                }
                return this.mUICreatedWindow;
            }
        }
        
        public UIDeleteWindow UIDeleteWindow
        {
            get
            {
                if ((this.mUIDeleteWindow == null))
                {
                    this.mUIDeleteWindow = new UIDeleteWindow();
                }
                return this.mUIDeleteWindow;
            }
        }
        
        public UIDeletedWindow UIDeletedWindow
        {
            get
            {
                if ((this.mUIDeletedWindow == null))
                {
                    this.mUIDeletedWindow = new UIDeletedWindow();
                }
                return this.mUIDeletedWindow;
            }
        }
        
        public UIPasswordmanagerWindow1 UIPasswordmanagerWindow1
        {
            get
            {
                if ((this.mUIPasswordmanagerWindow1 == null))
                {
                    this.mUIPasswordmanagerWindow1 = new UIPasswordmanagerWindow1();
                }
                return this.mUIPasswordmanagerWindow1;
            }
        }
        
        public UIClosingWindow UIClosingWindow
        {
            get
            {
                if ((this.mUIClosingWindow == null))
                {
                    this.mUIClosingWindow = new UIClosingWindow();
                }
                return this.mUIClosingWindow;
            }
        }
        
        public UIUpdatedWindow UIUpdatedWindow
        {
            get
            {
                if ((this.mUIUpdatedWindow == null))
                {
                    this.mUIUpdatedWindow = new UIUpdatedWindow();
                }
                return this.mUIUpdatedWindow;
            }
        }
        #endregion
        
        #region Fields
        private CreateTestCategoryParams mCreateTestCategoryParams;
        
        private CreatePasswordParams mCreatePasswordParams;
        
        private AssertPasswordCreatedExpectedValues mAssertPasswordCreatedExpectedValues;
        
        private AssertRowCountExpectedValues mAssertRowCountExpectedValues;
        
        private AssertCreatedPasswordIdentifierExpectedValues mAssertCreatedPasswordIdentifierExpectedValues;
        
        private SearchAfterIdentifierParams mSearchAfterIdentifierParams;
        
        private UpdatePasswordParams mUpdatePasswordParams;
        
        private AssertPasswordChangedExpectedValues mAssertPasswordChangedExpectedValues;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIPasswordmanagerWindow mUIPasswordmanagerWindow;
        
        private UICreatedWindow mUICreatedWindow;
        
        private UIDeleteWindow mUIDeleteWindow;
        
        private UIDeletedWindow mUIDeletedWindow;
        
        private UIPasswordmanagerWindow1 mUIPasswordmanagerWindow1;
        
        private UIClosingWindow mUIClosingWindow;
        
        private UIUpdatedWindow mUIUpdatedWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateTestCategory'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CreateTestCategoryParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'TestCategory' in 'TXTName' text box
        /// </summary>
        public string UITXTNameEditText = "TestCategory";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreatePassword'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CreatePasswordParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'identifier' in 'TXTName' text box
        /// </summary>
        public string UITXTNameEditText = "identifier";
        
        /// <summary>
        /// Type 'user' in 'TXTUsername' text box
        /// </summary>
        public string UITXTUsernameEditText = "user";
        
        /// <summary>
        /// Type 'identy' in 'TXTName' text box
        /// </summary>
        public string UITXTNameEditText1 = "identy";
        
        /// <summary>
        /// Type 'gibbiX12345$' in 'TXTPasswordClear' text box
        /// </summary>
        public string UITXTPasswordClearEditText = "gibbiX12345$";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertPasswordCreated'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertPasswordCreatedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'The password has been created' label equals 'The password has been created'
        /// </summary>
        public string UIThepasswordhasbeencrTextDisplayText = "The password has been created";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertRowCount'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertRowCountExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'RowCount' property of 'ListPasswords' table equals '1'
        /// </summary>
        public int UIListPasswordsTableRowCount = 1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCreatedPasswordIdentifier'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertCreatedPasswordIdentifierExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'identy' label equals 'identy'
        /// </summary>
        public string UIIdentyTextDisplayText = "identy";
        
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'identy' cell equals 'identy'
        /// </summary>
        public string UIIdentyCellFriendlyName = "identy";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchAfterIdentifier'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SearchAfterIdentifierParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Identifier' in 'CMBSeachCategory' combo box
        /// </summary>
        public string UICMBSeachCategoryComboBoxSelectedItem = "Identifier";
        
        /// <summary>
        /// Type 'identy' in 'TXTSearchTerm' text box
        /// </summary>
        public string UITXTSearchTermEdit1Text = "identy";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdatePassword'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UpdatePasswordParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'testX12345$' in 'TXTPasswordClear' text box
        /// </summary>
        public string UITXTPasswordClearEditText = "testX12345$";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertPasswordChanged'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertPasswordChangedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'TXTPasswordClear' text box equals 'testX12345$'
        /// </summary>
        public string UITXTPasswordClearEditText = "testX12345$";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Elementansicht";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIM120ProjektexeListItem UIM120ProjektexeListItem
        {
            get
            {
                if ((this.mUIM120ProjektexeListItem == null))
                {
                    this.mUIM120ProjektexeListItem = new UIM120ProjektexeListItem(this);
                }
                return this.mUIM120ProjektexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIM120ProjektexeListItem mUIM120ProjektexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIM120ProjektexeListItem : WinListItem
    {
        
        public UIM120ProjektexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "M120Projekt.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasswordmanagerWindow : WpfWindow
    {
        
        public UIPasswordmanagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Password manager";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIItemCustom1 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom1(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public UIItemCustom2 UIItemCustom2
        {
            get
            {
                if ((this.mUIItemCustom2 == null))
                {
                    this.mUIItemCustom2 = new UIItemCustom2(this);
                }
                return this.mUIItemCustom2;
            }
        }
        
        public UIItemCustom11 UIItemCustom11
        {
            get
            {
                if ((this.mUIItemCustom11 == null))
                {
                    this.mUIItemCustom11 = new UIItemCustom11(this);
                }
                return this.mUIItemCustom11;
            }
        }
        
        public UIItemCustom12 UIItemCustom12
        {
            get
            {
                if ((this.mUIItemCustom12 == null))
                {
                    this.mUIItemCustom12 = new UIItemCustom12(this);
                }
                return this.mUIItemCustom12;
            }
        }
        
        public UIItemCustom13 UIItemCustom13
        {
            get
            {
                if ((this.mUIItemCustom13 == null))
                {
                    this.mUIItemCustom13 = new UIItemCustom13(this);
                }
                return this.mUIItemCustom13;
            }
        }
        
        public UIItemCustom14 UIItemCustom14
        {
            get
            {
                if ((this.mUIItemCustom14 == null))
                {
                    this.mUIItemCustom14 = new UIItemCustom14(this);
                }
                return this.mUIItemCustom14;
            }
        }
        
        public UIItemCustom15 UIItemCustom15
        {
            get
            {
                if ((this.mUIItemCustom15 == null))
                {
                    this.mUIItemCustom15 = new UIItemCustom15(this);
                }
                return this.mUIItemCustom15;
            }
        }
        
        public UIItemCustom16 UIItemCustom16
        {
            get
            {
                if ((this.mUIItemCustom16 == null))
                {
                    this.mUIItemCustom16 = new UIItemCustom16(this);
                }
                return this.mUIItemCustom16;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        
        private UIItemCustom1 mUIItemCustom1;
        
        private UIItemCustom2 mUIItemCustom2;
        
        private UIItemCustom11 mUIItemCustom11;
        
        private UIItemCustom12 mUIItemCustom12;
        
        private UIItemCustom13 mUIItemCustom13;
        
        private UIItemCustom14 mUIItemCustom14;
        
        private UIItemCustom15 mUIItemCustom15;
        
        private UIItemCustom16 mUIItemCustom16;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UC_KategorieList";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public UIItemToolBar UIItemToolBar
        {
            get
            {
                if ((this.mUIItemToolBar == null))
                {
                    this.mUIItemToolBar = new UIItemToolBar(this);
                }
                return this.mUIItemToolBar;
            }
        }
        
        public UIListKategorieTable UIListKategorieTable
        {
            get
            {
                if ((this.mUIListKategorieTable == null))
                {
                    this.mUIListKategorieTable = new UIListKategorieTable(this);
                }
                return this.mUIListKategorieTable;
            }
        }
        #endregion
        
        #region Fields
        private UIItemToolBar mUIItemToolBar;
        
        private UIListKategorieTable mUIListKategorieTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemToolBar : WpfToolBar
    {
        
        public UIItemToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfButton UIBTNAddButton
        {
            get
            {
                if ((this.mUIBTNAddButton == null))
                {
                    this.mUIBTNAddButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBTNAddButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BTNAdd";
                    this.mUIBTNAddButton.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUIBTNAddButton;
            }
        }
        
        public WpfButton UIBTNDeleteButton
        {
            get
            {
                if ((this.mUIBTNDeleteButton == null))
                {
                    this.mUIBTNDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBTNDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BTNDelete";
                    this.mUIBTNDeleteButton.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUIBTNDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBTNAddButton;
        
        private WpfButton mUIBTNDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIListKategorieTable : WpfTable
    {
        
        public UIListKategorieTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ListKategorie";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public UIPART_ColumnHeadersPrHeader UIPART_ColumnHeadersPrHeader
        {
            get
            {
                if ((this.mUIPART_ColumnHeadersPrHeader == null))
                {
                    this.mUIPART_ColumnHeadersPrHeader = new UIPART_ColumnHeadersPrHeader(this);
                }
                return this.mUIPART_ColumnHeadersPrHeader;
            }
        }
        
        public UIItem20016Row UIItem20016Row
        {
            get
            {
                if ((this.mUIItem20016Row == null))
                {
                    this.mUIItem20016Row = new UIItem20016Row(this);
                }
                return this.mUIItem20016Row;
            }
        }
        #endregion
        
        #region Fields
        private UIPART_ColumnHeadersPrHeader mUIPART_ColumnHeadersPrHeader;
        
        private UIItem20016Row mUIItem20016Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPART_ColumnHeadersPrHeader : WpfControl
    {
        
        public UIPART_ColumnHeadersPrHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_ColumnHeadersPresenter";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public UICategoryColumnHeader UICategoryColumnHeader
        {
            get
            {
                if ((this.mUICategoryColumnHeader == null))
                {
                    this.mUICategoryColumnHeader = new UICategoryColumnHeader(this);
                }
                return this.mUICategoryColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private UICategoryColumnHeader mUICategoryColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICategoryColumnHeader : WpfControl
    {
        
        public UICategoryColumnHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Category";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfText UICategoryText
        {
            get
            {
                if ((this.mUICategoryText == null))
                {
                    this.mUICategoryText = new WpfText(this);
                    #region Search Criteria
                    this.mUICategoryText.SearchProperties[WpfText.PropertyNames.Name] = "Category";
                    this.mUICategoryText.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUICategoryText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUICategoryText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem20016Row : WpfRow
    {
        
        public UIItem20016Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = "20016";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public UITestCategoryCell UITestCategoryCell
        {
            get
            {
                if ((this.mUITestCategoryCell == null))
                {
                    this.mUITestCategoryCell = new UITestCategoryCell(this);
                }
                return this.mUITestCategoryCell;
            }
        }
        #endregion
        
        #region Fields
        private UITestCategoryCell mUITestCategoryCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITestCategoryCell : WpfCell
    {
        
        public UITestCategoryCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Category";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfText UITestCategoryText
        {
            get
            {
                if ((this.mUITestCategoryText == null))
                {
                    this.mUITestCategoryText = new WpfText(this);
                    #region Search Criteria
                    this.mUITestCategoryText.SearchProperties[WpfText.PropertyNames.Name] = "TestCategory";
                    this.mUITestCategoryText.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUITestCategoryText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUITestCategoryText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UC_Category";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITXTNameEdit
        {
            get
            {
                if ((this.mUITXTNameEdit == null))
                {
                    this.mUITXTNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITXTNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TXTName";
                    this.mUITXTNameEdit.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUITXTNameEdit;
            }
        }
        
        public UIItemToolBar1 UIItemToolBar
        {
            get
            {
                if ((this.mUIItemToolBar == null))
                {
                    this.mUIItemToolBar = new UIItemToolBar1(this);
                }
                return this.mUIItemToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITXTNameEdit;
        
        private UIItemToolBar1 mUIItemToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemToolBar1 : WpfToolBar
    {
        
        public UIItemToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfButton UIBTNSaveButton
        {
            get
            {
                if ((this.mUIBTNSaveButton == null))
                {
                    this.mUIBTNSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBTNSaveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BTNSave";
                    this.mUIBTNSaveButton.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUIBTNSaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBTNSaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom2 : WpfCustom
    {
        
        public UIItemCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UC_PasswordListView";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public UIItemToolBar2 UIItemToolBar
        {
            get
            {
                if ((this.mUIItemToolBar == null))
                {
                    this.mUIItemToolBar = new UIItemToolBar2(this);
                }
                return this.mUIItemToolBar;
            }
        }
        
        public UIListPasswordsTable UIListPasswordsTable
        {
            get
            {
                if ((this.mUIListPasswordsTable == null))
                {
                    this.mUIListPasswordsTable = new UIListPasswordsTable(this);
                }
                return this.mUIListPasswordsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIItemToolBar2 mUIItemToolBar;
        
        private UIListPasswordsTable mUIListPasswordsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemToolBar2 : WpfToolBar
    {
        
        public UIItemToolBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfButton UIBTNAddButton
        {
            get
            {
                if ((this.mUIBTNAddButton == null))
                {
                    this.mUIBTNAddButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBTNAddButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BTNAdd";
                    this.mUIBTNAddButton.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUIBTNAddButton;
            }
        }
        
        public WpfEdit UITXTSearchTermEdit
        {
            get
            {
                if ((this.mUITXTSearchTermEdit == null))
                {
                    this.mUITXTSearchTermEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITXTSearchTermEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TXTSearchTerm";
                    this.mUITXTSearchTermEdit.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUITXTSearchTermEdit;
            }
        }
        
        public WpfComboBox UICMBSeachCategoryComboBox
        {
            get
            {
                if ((this.mUICMBSeachCategoryComboBox == null))
                {
                    this.mUICMBSeachCategoryComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUICMBSeachCategoryComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "CMBSeachCategory";
                    this.mUICMBSeachCategoryComboBox.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUICMBSeachCategoryComboBox;
            }
        }
        
        public WpfEdit UITXTSearchTermEdit1
        {
            get
            {
                if ((this.mUITXTSearchTermEdit1 == null))
                {
                    this.mUITXTSearchTermEdit1 = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITXTSearchTermEdit1.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TXTSearchTerm";
                    this.mUITXTSearchTermEdit1.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUITXTSearchTermEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBTNAddButton;
        
        private WpfEdit mUITXTSearchTermEdit;
        
        private WpfComboBox mUICMBSeachCategoryComboBox;
        
        private WpfEdit mUITXTSearchTermEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIListPasswordsTable : WpfTable
    {
        
        public UIListPasswordsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ListPasswords";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public UIItem10026Row UIItem10026Row
        {
            get
            {
                if ((this.mUIItem10026Row == null))
                {
                    this.mUIItem10026Row = new UIItem10026Row(this);
                }
                return this.mUIItem10026Row;
            }
        }
        #endregion
        
        #region Fields
        private UIItem10026Row mUIItem10026Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem10026Row : WpfRow
    {
        
        public UIItem10026Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = "10026";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public UIIdentyCell UIIdentyCell
        {
            get
            {
                if ((this.mUIIdentyCell == null))
                {
                    this.mUIIdentyCell = new UIIdentyCell(this);
                }
                return this.mUIIdentyCell;
            }
        }
        #endregion
        
        #region Fields
        private UIIdentyCell mUIIdentyCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIdentyCell : WpfCell
    {
        
        public UIIdentyCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Identifier";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfText UIIdentyText
        {
            get
            {
                if ((this.mUIIdentyText == null))
                {
                    this.mUIIdentyText = new WpfText(this);
                    #region Search Criteria
                    this.mUIIdentyText.SearchProperties[WpfText.PropertyNames.Name] = "identy";
                    this.mUIIdentyText.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUIIdentyText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIIdentyText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom11 : WpfCustom
    {
        
        public UIItemCustom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UC_Password";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITXTNameEdit
        {
            get
            {
                if ((this.mUITXTNameEdit == null))
                {
                    this.mUITXTNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITXTNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TXTName";
                    this.mUITXTNameEdit.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUITXTNameEdit;
            }
        }
        
        public UIItemToolBar3 UIItemToolBar
        {
            get
            {
                if ((this.mUIItemToolBar == null))
                {
                    this.mUIItemToolBar = new UIItemToolBar3(this);
                }
                return this.mUIItemToolBar;
            }
        }
        
        public WpfButton UIBTNChangePasswordModButton
        {
            get
            {
                if ((this.mUIBTNChangePasswordModButton == null))
                {
                    this.mUIBTNChangePasswordModButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBTNChangePasswordModButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BTNChangePasswordMode";
                    this.mUIBTNChangePasswordModButton.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUIBTNChangePasswordModButton;
            }
        }
        
        public WpfEdit UITXTPasswordClearEdit
        {
            get
            {
                if ((this.mUITXTPasswordClearEdit == null))
                {
                    this.mUITXTPasswordClearEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITXTPasswordClearEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TXTPasswordClear";
                    this.mUITXTPasswordClearEdit.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUITXTPasswordClearEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITXTNameEdit;
        
        private UIItemToolBar3 mUIItemToolBar;
        
        private WpfButton mUIBTNChangePasswordModButton;
        
        private WpfEdit mUITXTPasswordClearEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemToolBar3 : WpfToolBar
    {
        
        public UIItemToolBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfButton UIBTNBackButton
        {
            get
            {
                if ((this.mUIBTNBackButton == null))
                {
                    this.mUIBTNBackButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBTNBackButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BTNBack";
                    this.mUIBTNBackButton.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUIBTNBackButton;
            }
        }
        
        public WpfButton UIBTNSaveButton
        {
            get
            {
                if ((this.mUIBTNSaveButton == null))
                {
                    this.mUIBTNSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBTNSaveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BTNSave";
                    this.mUIBTNSaveButton.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUIBTNSaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBTNBackButton;
        
        private WpfButton mUIBTNSaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom12 : WpfCustom
    {
        
        public UIItemCustom12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UC_Password";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITXTUsernameEdit
        {
            get
            {
                if ((this.mUITXTUsernameEdit == null))
                {
                    this.mUITXTUsernameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITXTUsernameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TXTUsername";
                    this.mUITXTUsernameEdit.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUITXTUsernameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITXTUsernameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom13 : WpfCustom
    {
        
        public UIItemCustom13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UC_Password";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITXTNameEdit
        {
            get
            {
                if ((this.mUITXTNameEdit == null))
                {
                    this.mUITXTNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITXTNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TXTName";
                    this.mUITXTNameEdit.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUITXTNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITXTNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom14 : WpfCustom
    {
        
        public UIItemCustom14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UC_Password";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfButton UIBTNChangePasswordModButton
        {
            get
            {
                if ((this.mUIBTNChangePasswordModButton == null))
                {
                    this.mUIBTNChangePasswordModButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBTNChangePasswordModButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BTNChangePasswordMode";
                    this.mUIBTNChangePasswordModButton.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUIBTNChangePasswordModButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBTNChangePasswordModButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom15 : WpfCustom
    {
        
        public UIItemCustom15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UC_Password";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITXTPasswordClearEdit
        {
            get
            {
                if ((this.mUITXTPasswordClearEdit == null))
                {
                    this.mUITXTPasswordClearEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITXTPasswordClearEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TXTPasswordClear";
                    this.mUITXTPasswordClearEdit.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUITXTPasswordClearEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITXTPasswordClearEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom16 : WpfCustom
    {
        
        public UIItemCustom16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UC_Password";
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public UIItemToolBar4 UIItemToolBar
        {
            get
            {
                if ((this.mUIItemToolBar == null))
                {
                    this.mUIItemToolBar = new UIItemToolBar4(this);
                }
                return this.mUIItemToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemToolBar4 mUIItemToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemToolBar4 : WpfToolBar
    {
        
        public UIItemToolBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WpfButton UIBTNSaveButton
        {
            get
            {
                if ((this.mUIBTNSaveButton == null))
                {
                    this.mUIBTNSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBTNSaveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BTNSave";
                    this.mUIBTNSaveButton.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUIBTNSaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBTNSaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreatedWindow : WinWindow
    {
        
        public UICreatedWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Created";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Created");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIThepasswordhasbeencrWindow UIThepasswordhasbeencrWindow
        {
            get
            {
                if ((this.mUIThepasswordhasbeencrWindow == null))
                {
                    this.mUIThepasswordhasbeencrWindow = new UIThepasswordhasbeencrWindow(this);
                }
                return this.mUIThepasswordhasbeencrWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        
        private UIThepasswordhasbeencrWindow mUIThepasswordhasbeencrWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Created");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Created");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIThepasswordhasbeencrWindow : WinWindow
    {
        
        public UIThepasswordhasbeencrWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Created");
            #endregion
        }
        
        #region Properties
        public WinText UIThepasswordhasbeencrText
        {
            get
            {
                if ((this.mUIThepasswordhasbeencrText == null))
                {
                    this.mUIThepasswordhasbeencrText = new WinText(this);
                    #region Search Criteria
                    this.mUIThepasswordhasbeencrText.SearchProperties[WinText.PropertyNames.Name] = "The password has been created";
                    this.mUIThepasswordhasbeencrText.WindowTitles.Add("Created");
                    #endregion
                }
                return this.mUIThepasswordhasbeencrText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIThepasswordhasbeencrText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeleteWindow : WinWindow
    {
        
        public UIDeleteWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Delete";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Delete");
            #endregion
        }
        
        #region Properties
        public UIJAWindow UIJAWindow
        {
            get
            {
                if ((this.mUIJAWindow == null))
                {
                    this.mUIJAWindow = new UIJAWindow(this);
                }
                return this.mUIJAWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIJAWindow mUIJAWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIJAWindow : WinWindow
    {
        
        public UIJAWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Delete");
            #endregion
        }
        
        #region Properties
        public WinButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[WinButton.PropertyNames.Name] = "Ja";
                    this.mUIJAButton.WindowTitles.Add("Delete");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeletedWindow : WinWindow
    {
        
        public UIDeletedWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Deleted";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Deleted");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Deleted");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Deleted");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasswordmanagerWindow1 : WinWindow
    {
        
        public UIPasswordmanagerWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Password manager";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Password manager");
            #endregion
        }
        
        #region Properties
        public WinButton UISchließenButton
        {
            get
            {
                if ((this.mUISchließenButton == null))
                {
                    this.mUISchließenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISchließenButton.SearchProperties[WinButton.PropertyNames.Name] = "Schließen";
                    this.mUISchließenButton.WindowTitles.Add("Password manager");
                    #endregion
                }
                return this.mUISchließenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISchließenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIClosingWindow : WinWindow
    {
        
        public UIClosingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Closing";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Closing");
            #endregion
        }
        
        #region Properties
        public UIJAWindow1 UIJAWindow
        {
            get
            {
                if ((this.mUIJAWindow == null))
                {
                    this.mUIJAWindow = new UIJAWindow1(this);
                }
                return this.mUIJAWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIJAWindow1 mUIJAWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIJAWindow1 : WinWindow
    {
        
        public UIJAWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Closing");
            #endregion
        }
        
        #region Properties
        public WinButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[WinButton.PropertyNames.Name] = "Ja";
                    this.mUIJAButton.WindowTitles.Add("Closing");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUpdatedWindow : WinWindow
    {
        
        public UIUpdatedWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Updated";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Updated");
            #endregion
        }
        
        #region Properties
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Updated");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Updated");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
